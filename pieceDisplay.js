//pieces for side board

BASIC_PIECE_SCALE = 0.8

renderBasicPiece = (y, x, scale, piece) => {
	tileCh[piece].to_obj()
		.with("Y", y)
		.with("X", x)
		.with("SCALING", scale * BASIC_PIECE_SCALE)
		.with("COLOR", pieceColors[+isPieceBlack(piece)])
		.add()
}

PIECE_PIXELS_WIDTH = 10
PIECE_PIXELS = {
	empty: ".",
	border: "#",
	fill: ":",
}

piecePixels = [
	// 0 1 2 3 4 5 6 7 8 9
	// . . . . . . . . . . 0
	// . . # # # # # # . . 1
	// . # # : : : : # # . 2
	// . # : : : : : : # . 3
	// . # : : : : : : # . 4
	// . # : : : : : : # . 5
	// . . # : : : : # . . 6
	// . # : : : : : : # . 7
	// . # # # # # # # # . 8
	// . . . . . . . . . . 9
	[
		//border
		["#", [2, 1], [7, 8]],
		["#", [1, 2], [8, 5]],
		["#", [1, 7], [8, 8]],

		//fill
		[":", [3, 2], [6, 6]],
		[":", [2, 3], [7, 5]],
		[":", [2, 7], [7, 7]],
	],

	// 0 1 2 3 4 5 6 7 8 9
	// . # # # . . # # # . 0
	// # : : # # # # : : # 1
	// # : : : : : : : : # 2
	// # : # # : : # # : # 3
	// # : : # : : # : : # 4
	// # : : : : : : : : # 5
	// . # : : : : : : # . 6
	// . # # : : : : # # . 7
	// # : : : : : : : : # 8
	// # # # # # # # # # # 9
	[
		//border
		["#", [0, 1], [9, 5]],
		["#", [0, 8], [9, 9]],
		["#", [1, 0], [3, 7]],
		["#", [6, 0], [8, 7]],

		//fill
		[":", [1, 8], [8, 8]],
		[":", [1, 1], [2, 5]],
		[":", [7, 1], [8, 5]],
		[":", [2, 6], [2, 6]],
		[":", [7, 6], [7, 6]],
		[":", [3, 2], [6, 7]],

		//eyes
		["#", [2, 3], [3, 3]],
		["#", [6, 3], [7, 3]],
		["#", [3, 3], [3, 4]],
		["#", [6, 3], [6, 4]],
	],

	// 0 1 2 3 4 5 6 7 8 9
	// . . . . # # # . . . 0
	// . . . . # : # # . . 1
	// . . # # # : : # # . 2
	// # # # : : : : : # # 3
	// # : : : # : : : : # 4
	// # : : : : : : : : # 5
	// # # # : : : : : : # 6
	// . # : : : : : : # . 7
	// # : : : : : : : : # 8
	// # # # # # # # # # # 9
	[
		//border
		["#", [0, 8], [9, 9]],
		["#", [1, 7], [8, 7]],
		["#", [0, 3], [9, 6]],
		["#", [2, 2], [8, 2]],
		["#", [4, 1], [7, 1]],
		["#", [4, 0], [6, 0]],

		//fill
		[":", [1, 8], [8, 8]],
		[":", [2, 7], [7, 7]],
		[":", [3, 6], [8, 6]],
		[":", [1, 4], [8, 5]],
		[":", [3, 3], [7, 3]],
		[":", [5, 2], [6, 2]],
		[":", [5, 1], [5, 1]],

		//eye
		["#", [4, 4], [4, 4]],
	],

	// 0 1 2 3 4 5 6 7 8 9
	// . . . # # # # . . . 0
	// . . # # : : # # . . 1
	// . . # : : : : # # . 2
	// # # # # : : : : # # 3
	// # : : # # : : : : # 4
	// # : : : : : : : : # 5
	// # # : : : : : : # # 6
	// . # # : : : : # # . 7
	// # : : : : : : : : # 8
	// # # # # # # # # # # 9
	[
		//border
		["#", [0, 8], [9, 9]],
		["#", [1, 7], [8, 7]],
		["#", [0, 3], [9, 6]],
		["#", [2, 1], [7, 2]],
		["#", [8, 2], [8, 2]],
		["#", [3, 0], [6, 0]],

		//fill
		[":", [1, 8], [8, 8]],
		[":", [3, 7], [6, 2]],
		[":", [4, 1], [5, 1]],
		[":", [1, 4], [8, 5]],
		[":", [2, 6], [7, 6]],
		[":", [7, 3], [7, 3]],

		//mouth
		["#", [3, 3], [3, 4]],
		["#", [4, 4], [4, 4]],
	],

	// 0 1 2 3 4 5 6 7 8 9
	// # # # # # # . # # # 0
	// # : : : : # . # : # 1
	// # : : : : # # # : # 2
	// # : : : : : : : : # 3
	// # # : : : : : : # # 4
	// . # # : : : : # # . 5
	// . . # : : : : # . . 6
	// . # # : : : : # # . 7
	// # : : : : : : : : # 8
	// # # # # # # # # # # 9
	[
		//border
		["#", [0, 0], [5, 4]],
		["#", [7, 0], [9, 4]],
		["#", [1, 5], [8, 5]],
		["#", [2, 6], [7, 6]],
		["#", [1, 7], [8, 7]],
		["#", [0, 8], [9, 9]],
		["#", [6, 2], [6, 2]],

		//fill
		[":", [3, 3], [6, 7]],
		[":", [8, 1], [8, 3]],
		[":", [1, 1], [4, 3]],
		[":", [1, 8], [8, 8]],
		[":", [2, 4], [7, 3]],
	],

	// 0 1 2 3 4 5 6 7 8 9
	// # . . . # # . . . # 0
	// # # . # : : # . # # 1
	// # : # : : : : # : # 2
	// # : : : : : : : : # 3
	// # : : : : : : : : # 4
	// . # : : : : : : # . 5
	// . . # : : : : # . . 6
	// . # : : : : : : # . 7
	// # : : : : : : : : # 8
	// # # # # # # # # # # 9
	[
		//border
		["#", [4, 0], [5, 0]],
		["#", [3, 1], [6, 1]],
		["#", [0, 0], [0, 0]],
		["#", [9, 0], [9, 0]],
		["#", [8, 1], [9, 4]],
		["#", [0, 1], [1, 4]],
		["#", [1, 5], [8, 2]],
		["#", [2, 6], [7, 6]],
		["#", [1, 7], [8, 7]],
		["#", [0, 8], [9, 9]],

		//fill
		[":", [1, 8], [8, 8]],
		[":", [2, 7], [7, 7]],
		[":", [3, 6], [6, 2]],
		[":", [1, 2], [1, 4]],
		[":", [2, 3], [2, 5]],
		[":", [8, 2], [8, 4]],
		[":", [7, 3], [7, 5]],
		[":", [4, 1], [5, 1]],
	],
]

PIXEL_PIECE_SCALE = 17 / 8

renderPixelPiece = (y, x, scale, piece) => {
	let
		color = getPieceColor(piece),
		wPiece = pieceIntoWhite(piece),
		piecePixel = piecePixels[wPiece],
		centerOff = -PIECE_PIXELS_WIDTH / 2 + 0.5,
		finalScale = PIXEL_PIECE_SCALE * scale

	for (let [col, [x1, y1], [x2, y2]] of piecePixel) {
		let
			pieceColor =
				col == PIECE_PIXELS.border ?
					color == WHITE ?
						COLOR_WHITE_OUTLINE :
						COLOR_BLACK_OUTLINE
					:
					color == WHITE ?
						COLOR_WHITE :
						COLOR_BLACK,
			squareRange = [
				x + (x1 + centerOff) * finalScale,
				y - (y1 + centerOff) * finalScale,
				x + (x2 + centerOff) * finalScale,
				y - (y2 + centerOff) * finalScale,
			]

		renderSquare(pieceColor, ...squareRange, finalScale).add()
	}
}

renderPieceCheckIndicator = (x, y) => {
	object({
		OBJ_ID: COLOR_SQUARE,
		GROUPS: [alpha60],
		COLOR: COLOR_RED,
		X: x,
		Y: y,
	}).add()
}